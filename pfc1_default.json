{
    "environment": [
        {
            "_id": "environment_1",
            "name": "Environment 1"
        }
    ],
    "firmware_module_type": [
        {
            "_id": "binary_actuator",
            "repository": {
                "type": "git",
                "url": "https://github.com/OpenAgInitiative/openag_binary_actuator.git"
            },
            "header_file": "openag_binary_actuator.h",
            "class_name": "BinaryActuator",
            "description": "Driver for an actuator that can only be set ot binary values",
            "arguments": [
                {
                    "name": "pin",
                    "type": "int"
                },
                {
                    "name": "is_active_low",
                    "type": "bool",
                    "default": false
                },
                {
                    "name": "shutoff_ms",
                    "type": "int",
                    "default": 10000
                }
            ],
            "inputs": {
                "cmd": {
                    "type": "std_msgs/Bool",
                    "categories": [
                        "actuators"
                    ]
                }
            },
            "dependencies": [
                {
                    "type": "git",
                    "url": "https://github.com/OpenAgInitiative/openag_firmware_module.git"
                }
            ]
        },
        {
            "_id": "pulse_actuator",
            "description": "Driver for binary actuators with very granular timescales",
            "repository": {
                "url": "https://github.com/OpenAgInitiative/openag_pulse_actuator.git",
                "type": "git"
            },
            "header_file": "openag_pulse_actuator.h",
            "class_name": "PulseActuator",
            "arguments": [
                {
                    "name": "pin",
                    "type": "int"
                },
                {
                    "name": "is_active_low",
                    "type": "bool",
                    "default": false
                },
                {
                    "name": "pulse_ms",
                    "type": "int",
                    "default": 100
                },
                {
                    "name": "update_ms",
                    "type": "int",
                    "default": 2000
                }
            ],
            "inputs": {
                "cmd": {
                    "type": "std_msgs/Bool"
                }
            },
            "dependencies": [
                {
                    "type": "git",
                    "url": "http://github.com/OpenAgInitiative/openag_firmware_module.git"
                }
            ]
        },
        {
            "_id": "air_flush",
            "repository": {
                "type": "git",
                "url": "https://github.com/OpenAgInitiative/openag_air_flush.git"
            },
            "header_file": "openag_air_flush.h",
            "class_name": "AirFlush",
            "arguments": [
                {
                    "name": "pin",
                    "type": "int"
                },
                {
                    "name": "is_active_low",
                    "type": "bool",
                    "default": false
                }
            ],
            "inputs": {
                "cmd": {
                    "type": "std_msgs/Float32"
                }
            },
            "dependencies": [
                {
                    "type": "git",
                    "url": "http://github.com/OpenAgInitiative/openag_firmware_module.git"
                }
            ]
        },
        {
            "_id": "dht22",
            "repository": {
                "type": "git",
                "url": "https://github.com/OpenAgInitiative/openag_dht22.git"
            },
            "header_file": "openag_dht22.h",
            "class_name": "Dht22",
            "description": "",
            "arguments": [
                {
                    "name": "pin",
                    "type": "int"
                }
            ],
            "outputs": {
                "air_temperature": {
                    "type": "std_msgs/Float32"
                },
                "air_humidity": {
                    "type": "std_msgs/Float32"
                }
            },
            "dependencies": [
                {
                    "type": "git",
                    "url": "https://github.com/OpenAgInitiative/openag_firmware_module.git"
                }
            ],
            "status_codes": {
                "1": "Failed to read from sensor"
            }
        },
        {
            "_id": "gc0011",
            "header_file": "openag_gc0011.h",
            "class_name": "Gc0011",
            "description": "Co2 sensor from the PFC1 BOM",
            "repository": {
                "type": "git",
                "url": "https://github.com/novemberalpha/openag_gc0011.git"
            },
            "arguments": [
                {
                    "name": "rx_pin",
                    "type": "int",
                    "default": 12
                },
                {
                    "name": "tx_pin",
                    "type": "int",
                    "default": 11
                }
            ],
            "outputs": {
                "air_carbon_dioxide": {
                    "type": "std_msgs/Float32"
                }
            },
            "dependencies": [
                {
                    "type": "git",
                    "url": "https://github.com/OpenAgInitiative/openag_firmware_module.git"
                }
            ],
            "status_codes": {
                "2": "Failed to read from sensor"
            }
        },
        {
            "_id": "gc0012",
            "header_file": "openag_gc0012.h",
            "class_name": "Gc0012",
            "description": "",
            "repository": {
                "type": "git",
                "url": "https://github.com/novemberalpha/openag_gc0012.git"
            },
            "arguments": [
                {
                    "name": "serial_port",
                    "type": "int",
                    "default": 1
                }
            ],
            "outputs": {
                "air_carbon_dioxide": {
                    "type": "std_msgs/Float32"
                }
            },
            "dependencies": [
                {
                    "type": "git",
                    "url": "https://github.com/OpenAgInitiative/openag_firmware_module.git"
                }
            ],
            "status_codes": {
                "2": "Failed to read from sensor"
            }
        },
        {
            "_id": "pwm_actuator",
            "repository": {
                "type": "git",
                "url": "https://github.com/OpenAgInitiative/openag_pwm_actuator.git"
            },
            "header_file": "openag_pwm_actuator.h",
            "class_name": "PwmActuator",
            "description": "Driver for an actuator that can take any value between 0 and 1",
            "arguments": [
                {
                    "name": "pin",
                    "type": "int"
                },
                {
                    "name": "is_active_low",
                    "type": "bool",
                    "default": false
                },
                {
                    "name": "threshold",
                    "type": "float",
                    "default": 0,
                    "description": "Command threshold at which the actuator turns on"
                }
            ],
            "inputs": {
                "cmd": {
                    "type": "std_msgs/Float32",
                    "categories": [
                        "actuators"
                    ]
                }
            },
            "dependencies": [
                {
                    "type": "git",
                    "url": "https://github.com/OpenAgInitiative/openag_firmware_module.git"
                }
            ],
            "status_codes": {
                "1": "Invalid command received"
            }
        },
        {
            "_id": "software_pwm_actuator",
            "repository": {
                "type": "git",
                "url": "https://github.com/OpenAgInitiative/openag_software_pwm_actuator.git"
            },
            "header_file": "openag_software_pwm_actuator.h",
            "class_name": "SoftwarePwmActuator",
            "description": "OpenAg driver for an actuator. Does pwm in software to allow for more flexibility in configuration: particularly to allow for longer periods for actuators that exhibit a nonlinear response to normal pwm.",
            "arguments": [
                {
                    "name": "pin",
                    "type": "int"
                },
                {
                    "name": "is_active_low",
                    "type": "bool",
                    "default": false
                },
                {
                    "name": "period",
                    "type": "int",
                    "default": 1000
                }
            ],
            "inputs": {
                "cmd": {
                    "type": "std_msgs/Float32",
                    "categories": [
                        "actuators"
                    ]
                }
            },
            "dependencies": [
                {
                    "type": "git",
                    "url": "https://github.com/OpenAgInitiative/openag_firmware_module.git"
                }
            ]
        },
        {
            "_id": "binary_sensor",
            "repository": {
                "type": "git",
                "url": "https://github.com/OpenAgInitiative/openag_binary_sensor.git"
            },
            "description": "Driver for any binary sensor that flips a pin",
            "class_name": "BinarySensor",
            "header_file": "openag_binary_sensor.h",
            "arguments": [
                {
                    "name": "pin",
                    "type": "int"
                },
                {
                    "name": "is_active_low",
                    "type": "bool",
                    "default": false
                }
            ],
            "outputs": {
                "is_on": {
                    "type": "std_msgs/Bool"
                }
            },
            "dependencies": [
                {
                    "type": "git",
                    "url": "https://github.com/OpenAgInitiative/openag_firmware_module.git"
                }
            ],
            "status_codes": {}
        }
    ],
    "software_module_type": [
        {
            "_id": "openag_brain:api.py",
            "package": "openag_brain",
            "executable": "api.py",
            "description": "HTTP API for interacting with ROS. Should be accessible at `<hostname>:5984/_openag/`"
        },
        {
            "_id": "openag_brain:handle_arduino.py",
            "package": "openag_brain",
            "executable": "handle_arduino.py",
            "description": "Handles generating code for, flashing, and reading from the Arduino",
            "parameters": {
                "should_flash": {
                    "type": "bool",
                    "description": "Whether to flash the Arduino during setup",
                    "default": false
                },
                "serial_port": {
                    "type": "str",
                    "description": "The serial port to which the arduino is connected",
                    "default": "/dev/ttyACM0"
                }
            }
        },
        {
            "_id": "openag_brain:image_persistence.py",
            "package": "openag_brain",
            "executable": "image_persistence.py",
            "description": "Listens for image data for a specific environment and stores it in CouchDB",
            "categories": [
                "persistence"
            ],
            "parameters": {
                "min_update_interval": {
                    "type": "int",
                    "description": "Minimum amount of time (in seconds) that must pass from the time one image from a given camera is written to the database to the time the next image from the same camera is written to the database.",
                    "default": "3600"
                }
            }
        },
        {
            "_id": "openag_brain:pid.py",
            "package": "openag_brain",
            "executable": "pid.py",
            "description": "A Python implementation of a Proportional-Integral-Derivative controller for ROS",
            "categories": [
                "control"
            ],
            "parameters": {
                "Kp": {
                    "type": "float",
                    "description": "Proportional control gain",
                    "default": 0
                },
                "Ki": {
                    "type": "float",
                    "description": "Integral control gain",
                    "default": 0
                },
                "Kd": {
                    "type": "float",
                    "description": "Derivative control gain",
                    "default": 0
                },
                "upper_limit": {
                    "type": "float",
                    "description": "The maximum limit for control_effort",
                    "default": 1
                },
                "lower_limit": {
                    "type": "float",
                    "description": "The minimum limit for control_effort",
                    "default": -1
                },
                "windup_limit": {
                    "type": "float",
                    "description": "The maximum limit for error integral",
                    "default": 1000
                },
                "deadband_width": {
                    "type": "float",
                    "description": "Control efforts with an absolute value below this values will be ignored and a 0 will be sent instead",
                    "default": 0
                },
                "variable": {
                    "type": "str",
                    "description": "The variable on which this loop operates. This parameter is used to rename the input and outputs of this module for easy integration for the inputs and outputs of firmware modules. For example if the `variable` were `air_temperature`, `desired` would become `air_temperature_desired`, `state` would become `air_temperature`, `cmd` would become `air_temperature_cmd`, `up_cmd` would become `air_temperature_up_cmd`, and `down_cmd` would become `air_temperature_down_cmd"
                }
            },
            "inputs": {
                "desired": {
                    "type": "std_msgs/Float64",
                    "description": "The message data element must contain the desired value of the state measurement of the controlled process. This topic can be renamed by the variable parameter"
                },
                "state": {
                    "type": "std_msgs/Float64",
                    "description": "The message data element must contain the current value of the controlled plant property. The controller publishes std_msgs/Float64 messages on the control_effort topic each time it receives a message on the state topic. Thus the rate at which the plant publishes state governs the control-loop rate - the plant should publish state at the desired loop rate. This topic can be renamed by the topic_from_plant parameter"
                }
            },
            "outputs": {
                "cmd": {
                    "type": "std_msgs/Float64",
                    "description": "The control_effort message data element contains the control effort to be applied to the process to drive state/data to equal setpoint/data. This topic can be renamed by the topic_from_controller parameter"
                }
            }
        },
        {
            "_id": "openag_brain:direct_controller.py",
            "package": "openag_brain",
            "executable": "direct_controller.py",
            "description": "A simple control loop that just interprets the set point as a direct command to the actuator",
            "categories": [
                "control"
            ],
            "parameters": {
                "variable": {
                    "type": "str",
                    "description": "The variable on which this loop operates. This parameter is used to rename the input and outputs of this module for easy integration for the inputs and outputs of firmware modules. For example if the `variable` were `air_temperature`, `desired` would become `air_temperature_desired`, `state` would become `air_temperature`, `cmd` would become `air_temperature_cmd`, `up_cmd` would become `air_temperature_up_cmd`, and `down_cmd` would become `air_temperature_down_cmd"
                }
            },
            "inputs": {
                "desired": {
                    "type": "std_msgs/Float64",
                    "description": "The message data element must contain the desired value of the state measurement of the controlled process. This topic can be renamed by the variable parameter"
                }
            },
            "outputs": {
                "state": {
                    "type": "std_msgs/Float64",
                    "description": "A copy of the cmd output under a different name. The makes explicit the assumption that applying the desired value as a command to the actuator sets the measured value of the relevant environmental variable to the same value."
                },
                "cmd": {
                    "type": "std_msgs/Float64",
                    "description": "The control_effort message data element contains the control effort to be applied to the process to drive state/data to equal setpoint/data. This topic can be renamed by the topic_from_controller parameter"
                }
            }
        },
        {
            "_id": "openag_brain:ebb_flow_controller.py",
            "package": "openag_brain",
            "executable": "ebb_flow_controller.py",
            "description": "A control loop that oscillates an actuator between two boolean values based on the parameters provided.",
            "categories": [
                "control"
            ],
            "parameters": {
                "variable": {
                    "type": "str",
                    "description": "The variable on which this loop operates. This parameter is used to rename the input and outputs of this module for easy integration for the inputs and outputs of firmware modules. For example if the `variable` were `air_temperature`, `desired` would become `air_temperature_desired`, `state` would become `air_temperature`, `cmd` would become `air_temperature_cmd`, `up_cmd` would become `air_temperature_up_cmd`, and `down_cmd` would become `air_temperature_down_cmd"
                },
                "on_time": {
                    "type": "int",
                    "description": "The amount of time the actuator should be on.",
                    "default": 0
                },
                "off_time": {
                    "type": "int",
                    "description": "The amount of time the actuator should be off.",
                    "default": 1
                }
            },
            "inputs": {},
            "outputs": {
                "state": {
                    "type": "std_msgs/Float64",
                    "description": "A copy of the cmd output under a different name. The makes explicit the assumption that applying the desired value as a command to the actuator sets the measured value of the relevant environmental variable to the same value."
                },
                "cmd": {
                    "type": "std_msgs/Float64",
                    "description": "The control_effort message data element contains the control effort to be applied to the process to drive state/data to equal setpoint/data. This topic can be renamed by the topic_from_controller parameter"
                }
            }
        },
        {
            "_id": "openag_brain:linear_controller.py",
            "package": "openag_brain",
            "executable": "linear_controller.py",
            "description": "A controller that passes on the measured reading of a sensor as an actuation command.",
            "categories": [
                "control"
            ],
            "parameters": {
                "variable": {
                    "type": "str",
                    "description": "The variable on which this loop operates. This parameter is used to rename the input and outputs of this module for easy integration for the inputs and outputs of firmware modules. For example if the `variable` were `air_temperature`, `desired` would become `air_temperature_desired`, `state` would become `air_temperature`, `cmd` would become `air_temperature_cmd`, `up_cmd` would become `air_temperature_up_cmd`, and `down_cmd` would become `air_temperature_down_cmd"
                }
            },
            "inputs": {
                "state": {
                    "type": "std_msgs/Float64",
                    "description": "The measured state"
                }
            },
            "outputs": {
                "cmd": {
                    "type": "std_msgs/Float64",
                    "description": "The control_effort message data element contains the control effort to be applied to the process to drive state/data to equal setpoint/data. This topic can be renamed by the topic_from_controller parameter"
                }
            }
        },
        {
            "_id": "openag_brain:on_off_controller.py",
            "package": "openag_brain",
            "executable": "on_off_controller.py",
            "description": "A simple control loop that just interprets boolean set points as a direct commands to the actuator",
            "categories": [
                "control"
            ],
            "parameters": {
                "variable": {
                    "type": "str",
                    "description": "The variable on which this loop operates. This parameter is used to rename the input and outputs of this module for easy integration for the inputs and outputs of firmware modules. For example if the `variable` were `air_temperature`, `desired` would become `air_temperature_desired`, `state` would become `air_temperature`, `cmd` would become `air_temperature_cmd`, `up_cmd` would become `air_temperature_up_cmd`, and `down_cmd` would become `air_temperature_down_cmd"
                }
            },
            "inputs": {
                "desired": {
                    "type": "std_msgs/Bool",
                    "description": "The message data element must contain the desired value of the state measurement of the controlled process. This topic can be renamed by the variable parameter"
                }
            },
            "outputs": {
                "state": {
                    "type": "std_msgs/Bool",
                    "description": "A copy of the cmd output under a different name. The makes explicit the assumption that applying the desired value as a command to the actuator sets the measured value of the relevant environmental variable to the same value."
                },
                "cmd": {
                    "type": "std_msgs/Bool",
                    "description": "The control_effort message data element contains the control effort to be applied to the process to drive state/data to equal setpoint/data. This topic can be renamed by the topic_from_controller parameter"
                }
            }
        },
        {
            "_id": "openag_brain:recipe_handler.py",
            "package": "openag_brain",
            "executable": "recipe_handler.py",
            "description": "Runs recipes and outputs set points for a given environment"
        },
        {
            "_id": "openag_brain:sensor_persistence.py",
            "package": "openag_brain",
            "executable": "sensor_persistence.py",
            "description": "Listens for measurements of environmental conditions for a specific environment and writes them to CouchDB",
            "categories": [
                "persistence"
            ],
            "parameters": {
                "max_update_interval": {
                    "type": "int",
                    "description": "Maximum amount of time that can pass between data point post events for an individual environmental variable and environment",
                    "default": 600
                },
                "min_update_interval": {
                    "type": "int",
                    "description": "Minimum amount of time that must pass between data point post events for an individual environmental variable and environment",
                    "default": 5
                }
            }
        },
        {
            "_id": "openag_brain:topic_connector.py",
            "package": "openag_brain",
            "executable": "topic_connector.py",
            "description": "Connects topics between the /sensors, /actuators and /<environment_id> namespaces in intuitive ways"
        },
        {
            "_id": "openag_brain:topic_filter.py",
            "package": "openag_brain",
            "executable": "topic_filter.py",
            "description": "Filters the /raw sensor outputs with an Exponentially Weighted Moving Average filter and creates /filtered topics with the filtered data"
        },
        {
            "_id": "openag_brain:video_writer.py",
            "package": "openag_brain",
            "executable": "video_writer.py",
            "description": "Watches the DB for aerial images of the environment and makes a timelapse from them",
            "categories": [
                "persistence"
            ],
            "parameters": {
                "timelapse_scaling_factor": {
                    "type": "int",
                    "description": "Number of seconds in real life that should correspond to 1 second in the timelapse",
                    "default": 86400
                }
            }
        },
        {
            "_id": "openag_brain:sensor_info_publisher.py",
            "package": "openag_brain",
            "executable": "sensor_info_publisher.py",
            "description": "Publishes information about the active sensors in ROS topics"
        },
        {
            "_id": "openag_brain:expand_diagnostics.py",
            "package": "openag_brain",
            "executable": "expand_diagnostics.py",
            "description": "Reads diagnostic information coming from the arduino, converts the status codes to status messages using configuration information from the database, and republishes the information"
        },
        {
            "_id": "usb_cam:usb_cam_node",
            "package": "usb_cam",
            "executable": "usb_cam_node",
            "description": "The usb_cam_node interfaces with standard USB cameras (e.g. the Logitech Quickcam) using libusb_cam and publishes images as sensor_msgs::Image. Uses the image_transport library to allow compressed image transport.",
            "categories": [
                "sensors"
            ],
            "parameters": {
                "video_device": {
                    "type": "str",
                    "description": "The device the camera is on",
                    "default": "/dev/video0"
                },
                "image_width": {
                    "type": "int",
                    "description": "Image width",
                    "default": 640
                },
                "image_height": {
                    "type": "int",
                    "description": "Image height",
                    "default": 480
                },
                "pixel_format": {
                    "type": "str",
                    "description": "Possible values are mjpeg, yuyv, uyvy",
                    "default": "mjpeg"
                },
                "io_method": {
                    "type": "str",
                    "default": "mmap",
                    "description": "Possible values are mmap, read, userptr"
                },
                "camera_frame_id": {
                    "type": "str",
                    "description": "The camera's tf frame",
                    "default": "head_camera"
                },
                "framerate": {
                    "type": "int",
                    "description": "The required framerate",
                    "default": 1
                },
                "contrast": {
                    "type": "int",
                    "default": 32,
                    "description": "Contrast of video image (0-255)"
                },
                "brightness": {
                    "type": "int",
                    "default": 32,
                    "description": "Brightness of video image (0-255)"
                },
                "saturation": {
                    "type": "int",
                    "default": 32,
                    "description": "Saturation of video image (0-255)"
                },
                "sharpness": {
                    "type": "int",
                    "default": 22,
                    "description": "Sharpness of video image (0-255)"
                },
                "autofocus": {
                    "type": "bool",
                    "default": false,
                    "description": "Enable camera's autofocus"
                },
                "focus": {
                    "type": "int",
                    "default": 51,
                    "description": "If autofocus is disabled, the focus of the camera (0=at infinity)"
                },
                "camera_info_url": {
                    "type": "str",
                    "default": "",
                    "description": "An url to the camera calibration file that will be read by the CameraInfoManager class"
                },
                "camera_name": {
                    "type": "str",
                    "default": "head_camera",
                    "description": "The camera name. This must match the name in the camera calibration"
                }
            }
        }
    ],
    "software_module": [
        {
            "_id": "arduino_handler",
            "type": "openag_brain:handle_arduino.py",
            "parameters": {
                "should_flash": true
            }
        },
        {
            "_id": "topic_filter_1",
            "type": "openag_brain:topic_filter.py",
            "environment": "environment_1"
        },
        {
            "_id": "sensor_info_publisher",
            "type": "openag_brain:sensor_info_publisher.py"
        },
        {
            "_id": "topic_connector",
            "type": "openag_brain:topic_connector.py"
        },
        {
            "_id": "sensor_persistence_1",
            "type": "openag_brain:sensor_persistence.py",
            "environment": "environment_1"
        },
        {
            "_id": "image_persistence_1",
            "type": "openag_brain:image_persistence.py",
            "environment": "environment_1",
            "parameters": {
                "min_update_interval": 3600
            }
        },
        {
            "_id": "video_writer_1",
            "type": "openag_brain:video_writer.py",
            "environment": "environment_1"
        },
        {
            "_id": "recipe_handler_1",
            "type": "openag_brain:recipe_handler.py",
            "environment": "environment_1"
        },
        {
            "_id": "api",
            "type": "openag_brain:api.py"
        },
        {
            "_id": "expand_diagnostics",
            "type": "openag_brain:expand_diagnostics.py"
        }
    ]
}
